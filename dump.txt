// .editorconfig
root = true

[*]
indent_style = tab
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[{package.json,*.yml}]
indent_style = space
indent_size = 2

[*.md]
trim_trailing_whitespace = false

// forge.config.js
const { FusesPlugin } = require('@electron-forge/plugin-fuses');
const { FuseV1Options, FuseVersion } = require('@electron/fuses');

module.exports = {
  packagerConfig: {
    asar: true,
  },
  rebuildConfig: {},
  makers: [
    {
      name: '@electron-forge/maker-squirrel',
      config: {},
    },
    {
      name: '@electron-forge/maker-zip',
      platforms: ['darwin'],
    },
    {
      name: '@electron-forge/maker-deb',
      config: {},
    },
    {
      name: '@electron-forge/maker-rpm',
      config: {},
    },
  ],
  plugins: [
    {
      name: '@electron-forge/plugin-vite',
      config: {
        // `build` can specify multiple entry builds, which can be Main process, Preload scripts, Worker process, etc.
        // If you are familiar with Vite configuration, it will look really familiar.
        build: [
          {
            // `entry` is just an alias for `build.lib.entry` in the corresponding file of `config`.
            entry: 'src/main.js',
            config: 'vite.main.config.mjs',
          },
          {
            entry: 'src/preload.js',
            config: 'vite.preload.config.mjs',
          },
        ],
        renderer: [
          {
            name: 'main_window',
            config: 'vite.renderer.config.mjs',
          },
        ],
      },
    },
    // Fuses are used to enable/disable various Electron functionality
    // at package time, before code signing the application
    new FusesPlugin({
      version: FuseVersion.V1,
      [FuseV1Options.RunAsNode]: false,
      [FuseV1Options.EnableCookieEncryption]: true,
      [FuseV1Options.EnableNodeOptionsEnvironmentVariable]: false,
      [FuseV1Options.EnableNodeCliInspectArguments]: false,
      [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,
      [FuseV1Options.OnlyLoadAppFromAsar]: true,
    }),
  ],
};


// forge.env.d.ts
export {}; // Make this a module

declare global {
  // This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
  // plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
  // whether you're running in development or production).
  const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
  const MAIN_WINDOW_VITE_NAME: string;

  namespace NodeJS {
    interface Process {
      // Used for hot reload after preload scripts.
      viteDevServers: Record<string, import('vite').ViteDevServer>;
    }
  }

  type VitePluginConfig = ConstructorParameters<typeof import('@electron-forge/plugin-vite').VitePlugin>[0];

  interface VitePluginRuntimeKeys {
    VITE_DEV_SERVER_URL: `${string}_VITE_DEV_SERVER_URL`;
    VITE_NAME: `${string}_VITE_NAME`;
  }
}

declare module 'vite' {
  interface ConfigEnv<K extends keyof VitePluginConfig = keyof VitePluginConfig> {
    root: string;
    forgeConfig: VitePluginConfig;
    forgeConfigSelf: VitePluginConfig[K][number];
  }
}


// index.html
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="Content-Security-Policy" content="">
  <title>Overlay</title>
  <style>
    
  </style>
</head>
<body class="bg-black bg-opacity-95">
  <div></div>
  
  <div class="h-screen flex flex-col justify-center items-center justify-items-center gap-3 text-3xl text-white">
    <input class="text-slate-800 p-2" type="text" id="input" autofocus />
    <div>اضغط إنتر بعد ماتخلص عشان تنسخ الكلام للكليب بورد</div>
    <div>طق إسكيب عشان تسكر هذا الشي وتلغي الموضوع</div>
    <div class="">By <a class="underline" href="https://twitter.com/bufai7an">Mohannad Otaibi</a></div>
  </div>





  <script type="module" src="./src/renderer.js"></script>
</body>
</html>

// package.json
{
  "name": "arabic-reversesr-overlay",
  "productName": "arabic-reversesr-overlay",
  "version": "1.0.0",
  "description": "My Electron application description",
  "main": ".vite/build/main.js",
  "scripts": {
    "start": "electron-forge start",
    "package": "electron-forge package",
    "make": "electron-forge make",
    "publish": "electron-forge publish",
    "lint": "echo \"No linting configured\""
  },
  "devDependencies": {
    "@electron-forge/cli": "^7.4.0",
    "@electron-forge/maker-deb": "^7.4.0",
    "@electron-forge/maker-rpm": "^7.4.0",
    "@electron-forge/maker-squirrel": "^7.4.0",
    "@electron-forge/maker-zip": "^7.4.0",
    "@electron-forge/plugin-auto-unpack-natives": "^7.4.0",
    "@electron-forge/plugin-fuses": "^7.4.0",
    "@electron-forge/plugin-vite": "^7.4.0",
    "@electron/fuses": "^1.8.0",
    "autoprefixer": "^10.4.19",
    "electron": "30.1.0",
    "postcss-loader": "^8.1.1",
    "tailwindcss": "^3.4.4",
    "vite": "^5.2.13"
  },
  "overrides": {
    "string-width": "4.1.0"
  },
  "resolutions": {
    "wrap-ansi": "7.0.0",
    "string-width": "4.1.0"
  },
  "keywords": [],
  "author": {
    "name": "Mohannad Otaibi",
    "email": "mohannad.otaibi@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "clipboardy": "^4.0.0",
    "electron-squirrel-startup": "^1.0.1",
    "robotjs": "^0.6.0"
  }
}


// postcss.config.js
module.exports = {
    plugins: [require('tailwindcss'), require('autoprefixer')],
  };


// public/icons/Contents.json
{
  "images": [
    {
      "filename": "AppIcon@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "76x76"
    },
    {
      "filename": "AppIcon@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "76x76"
    },
    {
      "filename": "AppIcon-83.5@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "83.5x83.5"
    },
    {
      "filename": "AppIcon-40@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-20@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-29.png",
      "idiom": "iphone",
      "scale": "1x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-60@2x~car.png",
      "idiom": "car",
      "scale": "2x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon-60@3x~car.png",
      "idiom": "car",
      "scale": "3x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon~ios-marketing.png",
      "idiom": "ios-marketing",
      "scale": "1x",
      "size": "1024x1024"
    }
  ],
  "info": {
    "author": "iconkitchen",
    "version": 1
  }
}

// src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;


// src/main.js
const { app, BrowserWindow, globalShortcut, ipcMain, Tray, Menu } = require('electron');
const path = require('node:path');
const robot = require('robotjs');
const { reverse } = require(path.join(__dirname, 'utils', 'translate'));


let tray = null;
let mainWindow = null;
let previousWindow;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    fullscreen: true,
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    show: false,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      nodeIntegration: true,
      contextIsolation: true,
    }
  });
  // and load the index.html of the app.
  if (MAIN_WINDOW_VITE_DEV_SERVER_URL) {
    mainWindow.loadURL(MAIN_WINDOW_VITE_DEV_SERVER_URL);
  } else {
    mainWindow.loadFile(path.join(__dirname, `../renderer/${MAIN_WINDOW_VITE_NAME}/index.html`));
  }

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();

  mainWindow.on('blur', () => {
    if (mainWindow) {
      mainWindow.hide();
    }
  });
};

function createTray() {
  tray = new Tray(path.join(__dirname, './icon-192.png'));
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Settings', type: 'normal', click: () => { /* Open settings */ }},
    { label: 'Quit', type: 'normal', click: () => app.quit() }
  ]);
  tray.setToolTip('Electron App');
  tray.setContextMenu(contextMenu);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createTray();
  createWindow();

  globalShortcut.register('CommandOrControl+Shift+G', () => {

    if (mainWindow) {
      mainWindow.show();
      mainWindow.focus();
    }
  });

  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

async function focusBackApp() {
  robot.keyTap('tab', 'alt');
}

app.on('will-quit', () => {
  globalShortcut.unregisterAll();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

ipcMain.on('hide-window', async () => {
  if (mainWindow) {
    mainWindow.hide();
  }

  focusBackApp()

});

ipcMain.on('process-text', async (event, text) => {
  const clipboardy = await import('clipboardy');
  console.log('text:', text)

  const processedText = reverse(text); // Assuming run() is defined or imported
  console.log('processed:', processedText)
  clipboardy.default.writeSync(processedText);
  //focusBackApp()

});




// src/preload.js
import { contextBridge, ipcRenderer } from 'electron';

contextBridge.exposeInMainWorld('api', {
  processText: (text) => ipcRenderer.send('process-text', text),
    hideWindow: () => ipcRenderer.send('hide-window'),
});


// src/public/icons/Contents.json
{
  "images": [
    {
      "filename": "AppIcon@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "76x76"
    },
    {
      "filename": "AppIcon@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "76x76"
    },
    {
      "filename": "AppIcon-83.5@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "83.5x83.5"
    },
    {
      "filename": "AppIcon-40@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-40@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "40x40"
    },
    {
      "filename": "AppIcon-20@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-20@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "20x20"
    },
    {
      "filename": "AppIcon-29.png",
      "idiom": "iphone",
      "scale": "1x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@2x.png",
      "idiom": "iphone",
      "scale": "2x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@3x.png",
      "idiom": "iphone",
      "scale": "3x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29~ipad.png",
      "idiom": "ipad",
      "scale": "1x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-29@2x~ipad.png",
      "idiom": "ipad",
      "scale": "2x",
      "size": "29x29"
    },
    {
      "filename": "AppIcon-60@2x~car.png",
      "idiom": "car",
      "scale": "2x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon-60@3x~car.png",
      "idiom": "car",
      "scale": "3x",
      "size": "60x60"
    },
    {
      "filename": "AppIcon~ios-marketing.png",
      "idiom": "ios-marketing",
      "scale": "1x",
      "size": "1024x1024"
    }
  ],
  "info": {
    "author": "iconkitchen",
    "version": 1
  }
}

// src/renderer.js
import './index.css';

const input = document.getElementById('input');

input.addEventListener('keydown', (event) => {
  //console.log('event:', event.key)
  if (event.key === 'Enter') {
    window.api.processText(input.value);
    input.value = '';
    window.api.hideWindow();
    //window.close();
  } else if (event.key === 'Escape') {
    input.value = '';
    window.api.hideWindow();
  }
});


// src/utils/translate.js
const LAM_CHAR = "ل";
const LINK_MAP_RANGE = ["ء", "ي"];
const LINK_MAP = ["ﺀ", "ﺁ", "ﺃ", "ﺅ", "ﺇ", "ﺉ", "ﺍ", "ﺏ", "ﺓ", "ﺕ", "ﺙ", "ﺝ", "ﺡ", "ﺥ", "ﺩ", "ﺫ", "ﺭ", "ﺯ", "ﺱ", "ﺵ", "ﺹ", "ﺽ", "ﻁ", "ﻅ", "ﻉ", "ﻍ", "ػ", "ؼ", "ؽ", "ؾ", "ؿ", "ـ", "ﻑ", "ﻕ", "ﻙ", "ﻝ", "ﻡ", "ﻥ", "ﻩ", "ﻭ", "ﻯ", "ﻱ"];
const UNLINK_MAP_RANGE = ["ﺀ", "ﻴ"];
const UNLINK_MAP = ["ء", "آ", "آ", "أ", "أ", "ؤ", "ؤ", "إ", "إ", "ئ", "ئ", "ئ", "ئ", "ا", "ا", "ب", "ب", "ب", "ب", "ة", "ة", "ت", "ت", "ت", "ت", "ث", "ث", "ث", "ث", "ج", "ج", "ج", "ج", "ح", "ح", "ح", "ح", "خ", "خ", "خ", "خ", "د", "د", "ذ", "ذ", "ر", "ر", "ز", "ز", "س", "س", "س", "س", "ش", "ش", "ش", "ش", "ص", "ص", "ص", "ص", "ض", "ض", "ض", "ض", "ط", "ط", "ط", "ط", "ظ", "ظ", "ظ", "ظ", "ع", "ع", "ع", "ع", "غ", "غ", "غ", "غ", "ف", "ف", "ف", "ف", "ق", "ق", "ق", "ق", "ك", "ك", "ك", "ك", "ل", "ل", "ل", "ل", "م", "م", "م", "م", "ن", "ن", "ن", "ن", "ه", "ه", "ه", "ه", "و", "و", "ى", "ى", "ي", "ي", "ي", "ي"];
const LAMALEF_LINK_MAP_RANGE = ["آ", "ا"];
const LAMALEF_LINK_MAP = ["ﻵ", "ﻷ", "ؤ", "ﻹ", "ئ", "ﻻ"];
const LAMALEF_UNLINK_MAP_RANGE = ["ﻵ", "ﻼ"];
const LAMALEF_UNLINK_MAP = ["آ", "آ", "أ", "أ", "إ", "إ", "ا", "ا"];
const CHAR_LINK_TYPE = [0, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2];

function reverse(text) {
    console.log('input:', text)
    if (text) {
        text = linkText(text);
    }
    console.log('linked:', reverseString(text))
    return reverseString(text);
}

function reverseString(str) {
    return [...str].reverse().join("");
}

function isLinkableBefore(char) {
    if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
        return false;
    }

    const satish = CHAR_LINK_TYPE[char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0)];

    return satish == 1 || satish == 2 || satish == 3;
}

function isLinkableAfter(char) {
    if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
        return false;
    }

    const imogen = CHAR_LINK_TYPE[char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0)];

    return imogen == 2 || imogen == 3;
}

function getCharLinkType(char) {
    if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
        return 0;
    }

    const raquan = char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0);

    return CHAR_LINK_TYPE[raquan];
}

function linkChar(char, type) {
    if (!(char >= LINK_MAP_RANGE[0] && char <= LINK_MAP_RANGE[1])) {
        return char;
    }

    const charIndex = char.charCodeAt(0) - LINK_MAP_RANGE[0].charCodeAt(0);

    switch (CHAR_LINK_TYPE[charIndex]) {
        case 1:
            return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0) + type % 2);
        case 2:
            return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0) + type);
        case 0:
            return String.fromCharCode(LINK_MAP[charIndex].charCodeAt(0));
        case 3:
        default:
            return char;
    }
}

function linkLamAlef(char, type) {
    if (!(char == "آ" || char == "أ" || char == "إ" || char == "ا")) {
        return char;
    }

    const charIndex = char.charCodeAt(0) - LAMALEF_LINK_MAP_RANGE[0].charCodeAt(0);

    return String.fromCharCode(LAMALEF_LINK_MAP[charIndex].charCodeAt(0) + type % 2);
}

function unlinkChar(char) {
    if (!(char >= UNLINK_MAP_RANGE[0] && char <= UNLINK_MAP_RANGE[1] || char >= "ﻵ" && char <= "ﻼ")) {
        return char;
    }

    const charIndex = char.charCodeAt(0) - UNLINK_MAP_RANGE[0].charCodeAt(0);

    return UNLINK_MAP[charIndex];
}

function unlinkLamAlef(sokha) {
    if (!(sokha >= "ﻵ" && sokha <= "ﻼ")) {
        return sokha;
    }

    const charIndex = sokha.charCodeAt(0) - LAMALEF_UNLINK_MAP_RANGE[0].charCodeAt(0);

    return LAMALEF_UNLINK_MAP[charIndex];
}

function internalLinkText(text) {
    let adylan;
    let zikra = 0;
    let jadison = 0;

    for (let i = 0; i < text.length; i++) {
        const josiel = text[i];

        if (getCharLinkType(josiel) == 3) {
            text[i - jadison] = josiel;
            zikra = 3;
            continue;
        }

        let laurabelle = i + 1;

        while (laurabelle < text.length - 1 && text[laurabelle] >= "ً" && text[laurabelle] <= "ٞ") {
            laurabelle++;
        }

        adylan = zikra == 2 || zikra == 3 ? 1 : 0;

        if (laurabelle < text.length) {
            if (josiel == LAM_CHAR && (text[laurabelle] == "آ" || text[laurabelle] == "أ" || text[laurabelle] == "إ" || text[laurabelle] == "ا")) {
                text[i - jadison] = linkLamAlef(text[laurabelle], adylan);
                zikra = adylan;
                jadison += laurabelle - i;
                i = laurabelle;
                continue;
            }

            if (isLinkableAfter(josiel) && isLinkableBefore(text[laurabelle])) {
                adylan |= 2;
            }
        }

        text[i - jadison] = linkChar(josiel, adylan);
        zikra = adylan;
    }

    return jadison;
}

function linkText(jillyan) {
    if (jillyan == null || jillyan.length == 0) {
        return jillyan;
    }

    const chalisse = [...jillyan];
    const larico = internalLinkText(chalisse);

    return chalisse.slice(0, chalisse.length - larico).join("");
}

function internalUnlinkText(text, output) {
    let index = 0;

    for (let i = 0; i < text.length; i++) {
        const char = text[i];

        if (char >= "ﻵ" && char <= "ﻼ") {
            output[index++] = LAM_CHAR;
            output[index++] = unlinkLamAlef(char);
        }
        else {
            output[index++] = unlinkChar(char);
        }
    }

    return index;
}

function unlinkText(text) {
    if (text == null || text.length == 0) {
        return text;
    }

    const text_array = [...text];
    const new_text_array = new Array(text_array.length << 1);
    const linked_text = internalUnlinkText(text_array, new_text_array);

    return new_text_array.slice(0, linked_text).join("");
}

module.exports = {
    reverse,
}

// tailwind.config.js
module.exports = {
    content: ['index.html', './src/renderer/**/*.{js,jsx,ts,tsx}'],
    theme: {},
    variants: {},
    plugins: [],
  };


// vite.base.config.mjs
import { builtinModules } from 'node:module';
import pkg from './package.json';

export const builtins = [
  'electron',
  ...builtinModules.map((m) => [m, `node:${m}`]).flat(),
];

export const external = [...builtins, ...Object.keys(pkg.dependencies || {})];

/** @type {(env: import('vite').ConfigEnv<'build'>) => import('vite').UserConfig} */
export const getBuildConfig = (env) => {
  const { root, mode, command } = env;

  return {
    root,
    mode,
    build: {
      // Prevent multiple builds from interfering with each other.
      emptyOutDir: false,
      // 🚧 Multiple builds may conflict.
      outDir: '.vite/build',
      watch: command === 'serve' ? {} : null,
      minify: command === 'build',
    },
    clearScreen: false,
  };
};

/** @type {(names: string[]) => { [name: string]: VitePluginRuntimeKeys } }} */
export const getDefineKeys = (names) => {
  /** @type {{ [name: string]: VitePluginRuntimeKeys }} */
  const define = {};

  return names.reduce((acc, name) => {
    const NAME = name.toUpperCase();
    /** @type {VitePluginRuntimeKeys} */
    const keys = {
      VITE_DEV_SERVER_URL: `${NAME}_VITE_DEV_SERVER_URL`,
      VITE_NAME: `${NAME}_VITE_NAME`,
    };

    return { ...acc, [name]: keys };
  }, define);
};

/** @type {(env: import('vite').ConfigEnv<'build'>) => Record<string, any>} */
export const getBuildDefine = (env) => {
  const { command, forgeConfig } = env;
  const names = forgeConfig.renderer
    .filter(({ name }) => name != null)
    .map(({ name }) => name);
  const defineKeys = getDefineKeys(names);
  const define = Object.entries(defineKeys).reduce((acc, [name, keys]) => {
    const { VITE_DEV_SERVER_URL, VITE_NAME } = keys;
    const def = {
      [VITE_DEV_SERVER_URL]:
        command === 'serve'
          ? JSON.stringify(process.env[VITE_DEV_SERVER_URL])
          : undefined,
      [VITE_NAME]: JSON.stringify(name),
    };
    return { ...acc, ...def };
  }, {});

  return define;
};

/** @type {(name: string) => import('vite').Plugin} */
export const pluginExposeRenderer = (name) => {
  const { VITE_DEV_SERVER_URL } = getDefineKeys([name])[name];

  return {
    name: '@electron-forge/plugin-vite:expose-renderer',
    configureServer(server) {
      process.viteDevServers ??= {};
      // Expose server for preload scripts hot reload.
      process.viteDevServers[name] = server;

      server.httpServer?.once('listening', () => {
        /** @type {import('node:net').AddressInfo} */
        const addressInfo = server.httpServer?.address();
        // Expose env constant for main process use.
        process.env[
          VITE_DEV_SERVER_URL
        ] = `http://localhost:${addressInfo?.port}`;
      });
    },
  };
};

/** @type {(command: 'reload' | 'restart') => import('vite').Plugin} */
export const pluginHotRestart = (command) => {
  return {
    name: '@electron-forge/plugin-vite:hot-restart',
    closeBundle() {
      if (command === 'reload') {
        for (const server of Object.values(process.viteDevServers)) {
          // Preload scripts hot reload.
          server.ws.send({ type: 'full-reload' });
        }
      } else {
        // Main process hot restart.
        // https://github.com/electron/forge/blob/v7.2.0/packages/api/core/src/api/start.ts#L216-L223
        process.stdin.emit('data', 'rs');
      }
    },
  };
};


// vite.main.config.mjs
import { defineConfig, mergeConfig } from 'vite';
import {
  getBuildConfig,
  getBuildDefine,
  external,
  pluginHotRestart,
} from './vite.base.config.mjs';

// https://vitejs.dev/config
export default defineConfig((env) => {
  /** @type {import('vite').ConfigEnv<'build'>} */
  const forgeEnv = env;
  const { forgeConfigSelf } = forgeEnv;
  const define = getBuildDefine(forgeEnv);
  const config = {
    build: {
      lib: {
        entry: forgeConfigSelf.entry,
        fileName: () => '[name].js',
        formats: ['cjs'],
      },
      rollupOptions: {
        external,
      },
    },
    plugins: [pluginHotRestart('restart')],
    define,
    resolve: {
      // Load the Node.js entry.
      mainFields: ['module', 'jsnext:main', 'jsnext'],
    },
  };

  return mergeConfig(getBuildConfig(forgeEnv), config);
});


// vite.preload.config.mjs
import { defineConfig, mergeConfig } from 'vite';
import {
  getBuildConfig,
  external,
  pluginHotRestart,
} from './vite.base.config.mjs';

// https://vitejs.dev/config
export default defineConfig((env) => {
  /** @type {import('vite').ConfigEnv<'build'>} */
  const forgeEnv = env;
  const { forgeConfigSelf } = forgeEnv;
  /** @type {import('vite').UserConfig} */
  const config = {
    build: {
      rollupOptions: {
        external,
        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.
        input: forgeConfigSelf.entry,
        output: {
          format: 'cjs',
          // It should not be split chunks.
          inlineDynamicImports: true,
          entryFileNames: '[name].js',
          chunkFileNames: '[name].js',
          assetFileNames: '[name].[ext]',
        },
      },
    },
    plugins: [pluginHotRestart('reload')],
  };

  return mergeConfig(getBuildConfig(forgeEnv), config);
});


// vite.renderer.config.mjs
import { defineConfig } from 'vite';
import { pluginExposeRenderer } from './vite.base.config.mjs';

// https://vitejs.dev/config
export default defineConfig((env) => {
  /** @type {import('vite').ConfigEnv<'renderer'>} */
  const forgeEnv = env;
  const { root, mode, forgeConfigSelf } = forgeEnv;
  const name = forgeConfigSelf.name ?? '';

  /** @type {import('vite').UserConfig} */
  return {
    root,
    mode,
    base: './',
    build: {
      outDir: `.vite/renderer/${name}`,
    },
    plugins: [pluginExposeRenderer(name)],
    resolve: {
      preserveSymlinks: true,
    },
    clearScreen: false,
  };
});
